#version 400 core

in vec2 f_textureCoord;
in vec3 surfaceNormal;
in vec3 toLightVector[6];
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D texture_diff; //nowa zmianna jednorodna
uniform vec3 lightColor[6];
uniform float cameraReflection;
uniform float reflectivity;


void main(void)
{
    vec3 finalDiffuse=vec3(0.0);
    vec3 finalSpecular=vec3(0.0);
    vec3 VectorToCamera = normalize(toCameraVector);
    float distanceToCamera = length(toCameraVector);

    for(int i=0;i<4;i++){
    vec3 Normal = normalize(surfaceNormal);
    vec3 LightVector = normalize(toLightVector[i]);
    vec3 lightDirection = -LightVector;
    vec3 reflectedLightDirection = reflect(lightDirection,Normal);

    float specularFactor= dot(reflectedLightDirection,VectorToCamera);
    specularFactor = max(specularFactor,0.0);
    float dampedFactor = pow(specularFactor,cameraReflection);
    finalSpecular = dampedFactor * reflectivity* lightColor[i];
    float L= dot(Normal,LightVector);
    float brightness = max(L,0.0);
    finalDiffuse = finalDiffuse + brightness*lightColor[i]; //
    }
    finalDiffuse = max(finalDiffuse,0.2);
    float distanceFactor= max(distanceToCamera,6);

        out_Color = (5/distanceFactor)*vec4(finalDiffuse,1.0)* texture(texture_diff, f_textureCoord) + vec4(finalSpecular,1.0);//-0.03*distanceFactor;  //zwraca kolor tekstury na podanych wspolrzedych
}